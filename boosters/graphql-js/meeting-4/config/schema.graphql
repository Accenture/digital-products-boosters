scalar Date

input CreateUserInput {
  bio: String
  firstName: String!
  lastName: String!
  pictureUrl: String
  username: String!
}

type CreateUserPayload {
  user: User
}

type Query {
  currentUser: User!
  repository(id: ID!): Repository
  user(id: ID!): User
  users: [User!]!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
}

type Repository {
  id: ID!
  name: String!
  user: User!
  collaboratorsConnection(
    after: String
    first: Int
    orderBy: CollaboratorOrder
  ): RepositoryCollaboratorsConnection!
}

enum OrderDirection {
  ASC
  DESC
}

enum CollaboratorOrderField {
  COLLABORATOR_JOINED_AT
}

input CollaboratorOrder {
  direction: OrderDirection!
  field: CollaboratorOrderField!
}

type RepositoryCollaboratorsConnection {
  collaborators: [User!]!
  edges: [RepositoryCollaboratorsEdge!]!
  pageInfo: PageInfo
}

type PageInfo {
  endCursor: String
}

type RepositoryCollaboratorsEdge {
  cursor: String!
  joinedAt: Date!
  node: User!
}

type User {
  bio: String
  firstName: String!
  fullName: String!
  id: ID!
  lastName: String!
  pictureUrl: String
  repositories: [Repository!]!
  username: String!
}
